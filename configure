#!/bin/bash

# Establishes base directory of script
BASEDIR=$(dirname $0)

# Establishes binary version number
BINARYVER=$"1.9"

# Establishes patch version
PATCHVER=$"1"

# Establishes Debian version
DEBVER=$"9.3.0"

# Establishes Linux Mint version
MINTVER=$"18.3"

# Establishes Kali Linux version
KALIVER=$"2017.3"

# Establishes size in KB
SIZEKB=$"588"

# Check if root
if [ $USER = "root" ]; then

  # Versioning files

  # Creates binaryver file
  echo "$BINARYVER" > $BASEDIR/binaryver

  # Creates pacthver file
  echo "$PATCHVER" > $BASEDIR/patchver

  # Creates debver file
  echo "$DEBVER" > $BASEDIR/debver

  # Creates mintver file
  echo "$MINTVER" > $BASEDIR/mintver

  # Creates mintver file
  echo "$KALIVER" > $BASEDIR/kaliver

# Build files

# Desktop
    echo "#!/bin/bash

echo '[Desktop Entry]
Categories=Utility; ConsoleOnly
Exec=bash /usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.sh
Hidden=no
Icon=/usr/lib/tux-disc/tux-disc.png
Name=Tux Disc
Terminal=true
Type=Application
Version=$BINARYVER-$PATCHVER' > ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.desktop

chmod a+x ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.desktop

if [ -e ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.desktop ]; then
    echo 'Desktop file built'
else
    echo 'Failed to build desktop file'
fi" > ./create-desktop.sh

if [ -e ./create-desktop.sh ]; then
    echo 'create-desktop.sh configured'
else
    echo 'Failed to configure create-desktop.sh'
fi

# Control
    echo "#!/bin/bash

echo 'Package: tux-disc
Architecture: all
Essential: no
Maintainer: John G Laufert
Depends:
Priority: optional
Section: utilities
Version: $BINARYVER-$REVISION
Installed-Size: $SIZEKB
Description: Downloads Linux ISO of choice based on user input' > ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/control && chmod a+x ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/control

if [ -e ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/control ]; then
    echo 'Control file built'
else
    echo 'Failed to build control file'
fi" > ./create-control.sh

if [ -e ./create-control.sh ]; then
    echo 'create-control.sh configured'
else
    echo 'Failed to configure create-control.sh'
fi

# Postinst
    echo "#!/bin/bash

echo '#!/bin/bash

cp /usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.desktop /home/*/.local/share/applications/ && update-desktop-database /home/*/.local/share/applications/' > ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/postinst && chmod a+x ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/postinst

if [ -e ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/postinst ]; then
    echo 'Postinst file built'
else
    echo 'Failed to build postinst file'
fi" > ./create-postinst.sh

if [ -e ./create-postinst.sh ]; then
    echo 'create-postinst.sh configured'
else
    echo 'Failed to configure create-postinst.sh'
fi

# Prerm
    echo "#!/bin/bash

echo 'if [ -e /home/*/.local/share/applications/tux-disc_$BINARYVER-$PATCHVER.desktop ]; then
  rm /home/*/.local/share/applications/tux-disc_$BINARYVER-$PATCHVER.desktop
fi' > ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/prerm && chmod a+x ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/prerm

if [ -e ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/prerm ]; then
    echo 'Prerm file built'
else
    echo 'Failed to build prerm file'
fi" > ./create-prerm.sh

if [ -e ./create-prerm.sh ]; then
    echo 'create-prerm.sh configured'
else
    echo 'Failed to configure create-prerm.sh'
fi

# Command
    echo "#!/bin/bash

echo '#!/bin/bash

bash /usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.sh' > ./tux-disc_$BINARYVER-$PATCHVER/usr/bin/tux-disc && chmod a+x ./tux-disc_$BINARYVER-$PATCHVER/usr/bin/tux-disc

if [ -e ./tux-disc_$BINARYVER-$PATCHVER/usr/bin/tux-disc ]; then
    echo 'Command file built'
else
    echo 'Failed to command command file'
fi" > ./create-command.sh

if [ -e ./create-command.sh ]; then
    echo 'create-command.sh configured'
else
    echo 'Failed to configure create-command.sh'
fi

# Directories
    echo "#!/bin/bash

mkdir ./tux-disc_$BINARYVER-$PATCHVER
mkdir ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN
mkdir ./tux-disc_$BINARYVER-$PATCHVER/usr
mkdir ./tux-disc_$BINARYVER-$PATCHVER/usr/bin
mkdir ./tux-disc_$BINARYVER-$PATCHVER/usr/lib
mkdir ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc

if [ -d ./tux-disc_$BINARYVER-$PATCHVER ]; then
    echo 'Directories built'
else
    echo 'Failed to build directories'
fi" > ./create-directories.sh

if [ -e ./create-directories.sh ]; then
    echo 'create-directories.sh configured'
else
    echo 'Failed to configure create-directories.sh'
fi

# Move and copy files
    echo "#!/bin/bash

# Changelog
cp ./CHANGELOG.md ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/changelog

# License
cp ./LICENSE ./tux-disc_$BINARYVER-$PATCHVER/DEBIAN/copyright

# README
cp ./README.md ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

# Script
cp ./tux-disc_$BINARYVER-$PATCHVER.sh ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

# Tux
cp ./tux-disc.png ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

cp ./debver ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

cp ./binaryver ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

cp ./mintver ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

cp ./kaliver ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/

cp ./patchver ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/" > ./copy-files.sh

if [ -e ./copy-files.sh ]; then
    echo 'copy-files.sh configured'
else
    echo 'Failed to configure copy-files.sh'
fi

# Copy source files
    echo "#!/bin/bash

# Command
cp ./tux-disc_$BINARYVER-$PATCHVER/usr/bin/tux-disc /usr/bin/

# Folder
cp -r ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc /usr/lib/

# Desktop
cp ./tux-disc_$BINARYVER-$PATCHVER/usr/lib/tux-disc/tux-disc_$BINARYVER-$PATCHVER.desktop /home/*/.local/share/applications/ && update-desktop-database /home/*/.local/share/applications/" > ./copy-source.sh

if [ -e ./copy-source.sh ]; then
    echo 'copy-source.sh configured'
else
    echo 'Failed to configure copy-source.sh'
fi

# Remove source files
    echo "#!/bin/bash

# Command
rm /usr/bin/tux-disc

# Folder
rm -r /usr/lib/tux-disc

# Desktop
rm /home/*/.local/share/applications/tux-disc_$BINARYVER-$PATCHVER.desktop" > ./make-uninstall

if [ -e ./make-uninstall ]; then
    echo 'make-uninstall configured'
else
    echo 'Failed to configure make-uninstall'
fi

# If not run as root
else
# Message
    echo "Please run this build script as root or with sudo"
fi
