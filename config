#!/bin/bash

# Establishes base directory of script
BASEDIR=$(dirname $0)

# Establishes script version number
SCRIPTVER=$"2017-11-16"

# Establishes binary version number
BINARYVER=$"2017.11.16"

# Establishes revision number
REVISION=$"v1.2"

# Establishes size in KB
SIZEKB=$"588"

# Check if root
if [ $USER = "root" ]; then

# Build files

# Desktop
    echo "#!/bin/bash

echo '#!/usr/bin/env xdg-open
[Desktop Entry]
Categories=Utility
Comment=
Exec=bash /usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.sh
Hidden=no
Icon=/usr/lib/tux-disc/tux-disc.png
Name=Tux Disc
Terminal=true
Type=Application
Version=$BINARYVER-$REVISION' > $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.desktop

chmod a+x $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.desktop

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.desktop ]; then
    echo 'Desktop file built'
else
    echo 'Failed to build desktop file'
fi" > $BASEDIR/create-desktop.sh

if [ -e $BASEDIR/create-desktop.sh ]; then
    echo 'create-desktop.sh configured'
else
    echo 'Failed to configure create-desktop.sh'
fi

# Control
    echo "#!/bin/bash

echo 'Package: tux-disc
Architecture: all
Essential: no
Maintainer: John G Laufert
Depends:
Priority: optional
Section: utilities
Version: $BINARYVER-$REVISION
Installed-Size: $SIZEKB
Description: Downloads Linux ISO of choice based on user input' > $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/control && chmod a+x $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/control

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/control ]; then
    echo 'Control file built'
else
    echo 'Failed to build control file'
fi" > $BASEDIR/create-control.sh

if [ -e $BASEDIR/create-control.sh ]; then
    echo 'create-control.sh configured'
else
    echo 'Failed to configure create-control.sh'
fi

# Postinst
    echo "#!/bin/bash

echo '#!/bin/bash

cp /usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.desktop /home/*/.local/share/applications/ && update-desktop-database /home/*/.local/share/applications/' > $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/postinst && chmod a+x $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/postinst

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/postinst ]; then
    echo 'Postinst file built'
else
    echo 'Failed to build postinst file'
fi" > $BASEDIR/create-postinst.sh

if [ -e $BASEDIR/create-postinst.sh ]; then
    echo 'create-postinst.sh configured'
else
    echo 'Failed to configure create-postinst.sh'
fi

# Prerm
    echo "#!/bin/bash

echo 'rm /home/*/.local/share/applications/tux-disc_$SCRIPTVER-$REVISION.desktop' > $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/prerm && chmod a+x $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/prerm

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/prerm ]; then
    echo 'Prerm file built'
else
    echo 'Failed to build prerm file'
fi" > $BASEDIR/create-prerm.sh

if [ -e $BASEDIR/create-prerm.sh ]; then
    echo 'create-prerm.sh configured'
else
    echo 'Failed to configure create-prerm.sh'
fi

# Command
    echo "#!/bin/bash

echo '#!/bin/bash

bash /usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.sh' > $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/bin/tux-disc && chmod a+x $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/bin/tux-disc

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/bin/tux-disc ]; then
    echo 'Command file built'
else
    echo 'Failed to command command file'
fi" > $BASEDIR/create-command.sh

if [ -e $BASEDIR/create-command.sh ]; then
    echo 'create-command.sh configured'
else
    echo 'Failed to configure create-command.sh'
fi

# Binary build
    echo "#!/bin/bash

echo 'V Folder size V'
du -sh $BASEDIR/tux-disc_$SCRIPTVER-$REVISION

chown -R root:root $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/ && dpkg-deb --build $BASEDIR/tux-disc_$SCRIPTVER-$REVISION
rm -r $BASEDIR/tux-disc_$SCRIPTVER-$REVISION

if [ -e $BASEDIR/tux-disc_$SCRIPTVER-$REVISION.deb ]; then
    echo 'Binary file built'
else
    echo 'Failed to build binary file'
fi" > $BASEDIR/create-binary.sh

if [ -e $BASEDIR/create-binary.sh ]; then
    echo 'create-binary.sh configured'
else
    echo 'Failed to configure create-binary.sh'
fi

# Directories
    echo "#!/bin/bash

mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION
mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN
mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr
mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/bin
mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib
mkdir $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc

if [ -d $BASEDIR/tux-disc_$SCRIPTVER-$REVISION ]; then
    echo 'Directories built'
else
    echo 'Failed to build directories'
fi" > $BASEDIR/create-directories.sh

if [ -e $BASEDIR/create-directories.sh ]; then
    echo 'create-directories.sh configured'
else
    echo 'Failed to configure create-directories.sh'
fi

# Move and copy files
    echo "#!/bin/bash

# Changelog
cp $BASEDIR/CHANGELOG.md $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/changelog

# License
cp $BASEDIR/LICENSE $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/DEBIAN/copyright

# README
cp $BASEDIR/README.md $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/

# Script
cp $BASEDIR/tux-disc_$SCRIPTVER-$REVISION.sh $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/

# Tux
cp $BASEDIR/tux-disc.png $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/" > $BASEDIR/copy-files.sh

if [ -e $BASEDIR/copy-files.sh ]; then
    echo 'copy-files.sh configured'
else
    echo 'Failed to configure copy-files.sh'
fi

# Copy source files
    echo "#!/bin/bash

# Command
cp $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/bin/tux-disc /usr/bin/

# Folder
cp -r $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc /usr/lib/

# Desktop
cp $BASEDIR/tux-disc_$SCRIPTVER-$REVISION/usr/lib/tux-disc/tux-disc_$SCRIPTVER-$REVISION.desktop /home/*/.local/share/applications/ && update-desktop-database /home/*/.local/share/applications/

# Remove source folder
rm -r $BASEDIR/tux-disc_$SCRIPTVER-$REVISION" > $BASEDIR/copy-source.sh

if [ -e $BASEDIR/copy-source.sh ]; then
    echo 'copy-source.sh configured'
else
    echo 'Failed to configure copy-source.sh'
fi

# Remove source files
    echo "#!/bin/bash

# Command
rm /usr/bin/tux-disc

# Folder
rm -r /usr/lib/tux-disc

# Desktop
rm /home/*/.local/share/applications/tux-disc_$SCRIPTVER-$REVISION.desktop" > $BASEDIR/make-uninstall

if [ -e $BASEDIR/make-uninstall ]; then
    echo 'make-uninstall configured'
else
    echo 'Failed to configure make-uninstall'
fi

# If not run as root
else
# Message
    echo "Please run this build script as root or with sudo"
fi
